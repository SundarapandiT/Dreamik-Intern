the whole website designed using react and nodejs

old payment.jsx
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import './Payment.css';

const Payment = () => {
  const navigate = useNavigate();
  const [orderData, setOrderData] = useState([]);
  const [priceDetails, setPriceDetails] = useState({});
  const [deliveryMode, setDeliveryMode] = useState("");
  const [paymentMode, setPaymentMode] = useState("");
  const [testPayCode, setTestPayCode] = useState("");
  const [sdkLoaded, setSdkLoaded] = useState(false);
  const [formContainer, setFormContainer] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [fname, setFname]=useState('')

  const generateOrderID = () => {
    if (formContainer?.name) {
      const prefix = formContainer.coupon ? 'R' : 'C';
      const generatedFname = `${prefix}${formContainer.name}`;
      setFname(generatedFname)
      const now = new Date();
      return `${generatedFname}${now.toISOString().replace(/[-:.TZ]/g, "")}`;
    }
    return ""; // Fallback in case of missing name
  };
  

  const loadRazorpaySDK = () => {
    if (sdkLoaded) return;
    const script = document.createElement("script");
    script.src = "https://checkout.razorpay.com/v1/checkout.js";
    script.onload = () => setSdkLoaded(true);
    script.onerror = () => {
      console.error("Failed to load Razorpay SDK");
      alert("Error loading payment gateway. Please try again later.");
    };
    document.body.appendChild(script);
  };

  useEffect(() => {
    loadRazorpaySDK();

    const storedOrderData = JSON.parse(localStorage.getItem("OrderData")) || [];
    const storedPriceDetails = JSON.parse(localStorage.getItem("PriceData")) || {};
    const storedPaymentDetails = JSON.parse(localStorage.getItem("PaymentDetails")) || {};
    const storedFormContainer = JSON.parse(localStorage.getItem("FormContainer")) || {};

    setOrderData(storedOrderData);
    setPriceDetails(storedPriceDetails);
    setPaymentMode(storedPaymentDetails?.paymentMode || "");
    setDeliveryMode(storedPaymentDetails?.deliveryMode || "");
    setFormContainer(storedFormContainer);
    
  }, []);
  

  const handlePayment = async () => {
    if (!sdkLoaded) {
      alert("Payment gateway not loaded. Please try again later.");
      return;
    }
    setIsLoading(true);
    let finalAmount = priceDetails.totalPrice || 0;

    if (testPayCode.startsWith("$TESTPAY") && testPayCode.length === 19) {
      finalAmount = finalAmount > 100 ? finalAmount / 100 : finalAmount / 10;
    }

    const currentDomain = window.location.hostname;

    const saveOrderDetails = async (paymentData) => {
      const orderId = generateOrderID();
      
      
      const orderDetails = {
        orderId,
        orderData,
        paymentDetails: paymentData,
        formContainer,
        priceDetails,
      };

      // Save the combined order and payment details in local storage
      localStorage.setItem("OrderConfirmationData", JSON.stringify(orderDetails));

      try {
        
        // Create the Blob for payment and info
        const paymentBlob = new Blob([JSON.stringify(paymentData)], { type: "application/json" });
        const infoBlob = new Blob([JSON.stringify(formContainer)], { type: "application/json" });
      
        // Prepare FormData for sending the JSON data and images
        const uploadForm = new FormData();
        uploadForm.append("payment", paymentBlob, "payment.json");
        uploadForm.append("info", infoBlob, "info.json");
      
        // Loop through the orderData and append the images as Blobs
        for (const [index, item] of orderData.entries()) {
          const orderImageBase64 = item.image;
          if (!orderImageBase64 || typeof orderImageBase64 !== "string") {
            console.warn(`No valid image data for item ${index + 1}. Skipping.`);
            continue;
          }
      
          // Generate a file name
          const imageFileName = `orderdetails_${orderId}_image${index + 1}.png`;
      
          // Decode base64 string and create the image Blob
          const base64Data = orderImageBase64.replace(/^data:image\/\w+;base64,/, "");
          const binaryData = atob(base64Data);
          const arrayBuffer = new Uint8Array(binaryData.length);
          for (let i = 0; i < binaryData.length; i++) {
            arrayBuffer[i] = binaryData.charCodeAt(i);
          }
      
          // Append the image to the FormData
          const imageBlob = new Blob([arrayBuffer], { type: "image/png" });
          uploadForm.append("images", imageBlob, imageFileName);
        }
        
        uploadForm.append("orderId",orderId);
        // uploadForm.append("name", fname);
        // Send the POST request with the FormData containing both JSON and images
        const response = await fetch("https://dreamik-intern.onrender.com/upload", {
          method: "POST",
          body: uploadForm,
        });
      
        if (response.ok) {
          alert("Payment successful! Order saved.");
          navigate("/orderconfirmation");
        } else {
          alert("Failed to save order. Please try again.");
        }
      } catch (error) {
        console.error("Error saving order:", error);
        alert("Error occurred. Please try again later.");
      }
finally
{
  setIsLoading(false);
}

    };

    if (currentDomain === "www.dreamik.com" || currentDomain === "dreamik.com") {
      const options = {
        key: "rzp_test_7y77238",
        amount: finalAmount * 100,
        currency: "INR",
        name: "DreamikAI",
        description: "Payment for your order",
        image: "/image/logo.png",
        handler: async (response) => {
          const paymentData = {
            PaymentID: response.razorpay_payment_id,
            PaymentAmount: finalAmount,
            PaymentVender: "RazorPay",
            PaymentPoint: "PaymentPage",
            PaymentDiscountCode: testPayCode,
            PaymentMode: paymentMode,
            DeliveryMode: deliveryMode,

          };

          await saveOrderDetails(paymentData);
        },
        prefill: {
          name: formContainer?.name || "",
          email: formContainer?.email || "",
          contact: formContainer?.phone || "",
        },
        theme: {
          color: "#3399cc",
        },
      };

      const razorpayInstance = new window.Razorpay(options);
      razorpayInstance.open();
    } else {
      const paymentData = {
        PaymentID: "TEST123456789",
            PaymentAmount: finalAmount,
            PaymentVender: "RazorPay",
            PaymentPoint: "PaymentPage",
            PaymentDiscountCode: testPayCode,
            PaymentMode: paymentMode,
            DeliveryMode: deliveryMode,
      };

      await saveOrderDetails(paymentData);
    }
  };

  return (
    <div>
      <h1>Dreamik AI Payment Gateway</h1>
      {isLoading ? (
        <div className="loading-message">
          <p>Please wait, confirming your order...</p>
        </div>
      ) : (
        <>
          <div id="optdiv">
            <h2>Payment Gateways</h2>
            <select name="paymentgateway" id="paymentgateway" disabled>
              <option value="razorpay">Razor Pay</option>
            </select>
            <input
              type="text"
              id="testpay"
              placeholder="Test Payment Coupon"
              value={testPayCode}
              onChange={(e) => setTestPayCode(e.target.value)}
            />
          </div>
          <div id="details-container" style={{ display: "flex", gap: "20px" }}>
            <div id="order-details">
              <h2>Order Details</h2>
              <ul>
                {orderData.map((prod, index) => (
                  <li key={index}>
                    {prod.Name} - Rs. {prod.price} x {prod.quantity}
                  </li>
                ))}
              </ul>
            </div>

            <div id="price">
              <h2>Price Details</h2>
              <p>Product Price: Rs. {priceDetails.prodPrice || 0}</p>
              <p>Delivery Charge: Rs. {priceDetails.delPrice || 0}</p>
              <p>CoD Charge: Rs. {priceDetails.cod || 0}</p>
              <p>Total Payment: Rs. {priceDetails.totalPrice || 0}</p>
            </div>

            <div id="delivery-options">
              <h2>Delivery Mode</h2>
              <p>{deliveryMode}</p>
            </div>

            <div id="payment-options">
              <h2>Payment Mode</h2>
              <p>{paymentMode}</p>
            </div>
          </div>

          <button id="pay-button" onClick={handlePayment}>
            Pay Now
          </button>
        </>
      )}
    </div>
  );
};

export default Payment;

>>>old pending orders

import { useState,useContext } from "react";
import "../PendingOrders.css";
// import { useNavigate } from "react-router-dom";
import { CartContext } from './CartContext';

const PendingOrders = () => {
  const [orderId, setOrderId] = useState("");
  const [files, setFiles] = useState([]);
  const [productDetails, setProductDetails] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  // const navigate = useNavigate();
  const { addToCart, cartCount } = useContext(CartContext);

  const fetchFiles = async () => {
    setLoading(true);
    try {
      const response = await fetch(
        `https://dreamik-intern.onrender.com/retrieve/${orderId}`
      );
      const data = await response.json();

      if (response.ok) {
        setFiles(data.files);

        // Find the info file and parse its content
        const infoFile = data.files.find((file) => file.name.endsWith(".txt"));
        if (infoFile) {
          const parsedInfo = JSON.parse(atob(infoFile.content));
          setProductDetails(parsedInfo.productDetails);
         
        }
      } else {
        setError(data.error || "An error occurred");
      }
    } catch (err) {
      setError("Failed to retrieve files.", err);
    } finally {
      setLoading(false);
    }
  };

  const addCart = (product, imageData) => {
    const existingCart = JSON.parse(localStorage.getItem('OrderData')) || [];
    const productInCart = {
      image: imageData,
      quantity: product.quantity || 1, // Default quantity if not set
      price: product.price, // Product price
      Name: product.Name, // Product name
      labeltype: product.labeltype, // Extra details
      size: product.size, // Product size
    };
    localStorage.setItem('productDetails', JSON.stringify(product));
    existingCart.push(productInCart);
    localStorage.setItem("OrderData", JSON.stringify(existingCart));
    addToCart();
    alert(`${product.Name} has been added to your cart.`);
  };

  return (
    <div id="pendingorder">
      <input
        type="text"
        placeholder="Enter Order ID"
        value={orderId}
        onChange={(e) => setOrderId(e.target.value)}
      />
      <button onClick={fetchFiles}>Retrieve Files</button>

      {loading && <p>Loading...</p>}

      {error && <p>Error: {error}</p>}

      <div>
        {files.length > 0 && (
          <div>
            <h3>Files for Order: {orderId}</h3>
            <div id="pending-files">
              {files.map((file, index) => {
                if (file.type === "image") {
                  const productIndex = Math.floor(index / 2); // Adjust index for paired image files
                  return (
                    <div key={file.name} className="product-div">
                      <img
                        src={`data:image/png;base64,${file.content}`}
                        alt={file.name}
                      />
                      {productDetails[productIndex] && (
                        <div>
                          <h4>Product Details:</h4>
                          <p>Name: {productDetails[productIndex].Name}</p>
                          <p>Price: ₹{productDetails[productIndex].price}</p>
                          <p>Size: {productDetails[productIndex].size}</p>
                          <p>Quantity: {productDetails[productIndex].quantity}</p>
                          <p>Label Type: {productDetails[productIndex].labeltype}</p>
                        </div>
                      )}
                      <button
                        onClick={() =>
                          addCart(
                            productDetails[productIndex],`data:image/png;base64,${file.content}`
                          )
                        }
                      >
                        Add to Cart
                      </button>
                    </div>
                  );
                } else if (file.type === "text") {
                  return null;
                } else {
                  return null;
                }
              })}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PendingOrders;
